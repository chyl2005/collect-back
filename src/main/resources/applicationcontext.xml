<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:utils="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 

	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 

	">

<!--开启@ Resource 注解支持 -->
 <context:annotation-config/>
    <!-- 启动对@Aspectj的支持 true为cglib，false为jdk代理，为true的话，会导致拦截不了mybatis的mapper-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
    <context:component-scan base-package="com.mm.back"/>
   
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="50"/>
        <property name="locations">
            <list>
                <value>classpath:database.properties</value>
            </list>
        </property>
    </bean>



	<!--配置数据库连接池 使用alibaba druid -->
	<!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
		<!--init-method="init" destroy-method="close">-->
		<!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
		<!--&lt;!&ndash;配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 &ndash;&gt;-->
		<!--&lt;!&ndash; <property name="name" value="play_activity_dataSource"></property> &ndash;&gt;-->
		<!--<property name="driverClassName" value="${mysql.classname}"></property>-->
		<!--<property name="url" value="${mysql.url}" />-->
		<!--<property name="username" value="${mysql.name}" />-->
		<!--<property name="password" value="${mysql.pwd}" />-->

		<!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
		<!--<property name="initialSize" value="${db.initialSize}" />-->
		<!--<property name="minIdle" value="${db.minIdle}" />-->
		<!--<property name="maxActive" value="${db.maxActive}" />-->


		<!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="60000" />-->
		<!--&lt;!&ndash; 超过时间限制是否回收 &ndash;&gt;-->
		<!--<property name="removeAbandoned" value="false" />-->
		<!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
		<!--<property name="timeBetweenEvictionRunsMillis" value="120000" />-->
		<!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
		<!--<property name="minEvictableIdleTimeMillis" value="120000" />-->
		<!--&lt;!&ndash; 用来检测连接是否有效的sql，要求是一个查询语句 &ndash;&gt;-->
		<!--<property name="validationQuery" value="SELECT 'x'" />-->
		<!--&lt;!&ndash; 申请连接的时候检测 &ndash;&gt;-->
		<!--<property name="testWhileIdle" value="true" />-->
		<!--&lt;!&ndash; 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 &ndash;&gt;-->
		<!--<property name="testOnBorrow" value="false" />-->
		<!--&lt;!&ndash; 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 &ndash;&gt;-->
		<!--<property name="testOnReturn" value="false" />-->
		<!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
		<!--<property name="poolPreparedStatements" value="false" />-->
		<!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
			<!--value="0" />-->
	<!--</bean>-->





	<!--&lt;!&ndash;hibernateProperties通用配置 &ndash;&gt;-->
	<!--<utils:properties id="hibernateProperties">-->
		<!--&lt;!&ndash;mysql数据库方言 &ndash;&gt;-->
		<!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>-->
		<!--&lt;!&ndash;打印sql语句 &ndash;&gt;-->
		<!--<prop key="hibernate.show_sql">false</prop>-->
		<!--&lt;!&ndash;打印sql语句时 方便阅读 &ndash;&gt;-->
		<!--<prop key="hibernate.format_sql">true</prop>-->
		<!--&lt;!&ndash;数据库生成策略 正式环境务必 update &ndash;&gt;-->
		<!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
		<!--&lt;!&ndash; session &ndash;&gt;-->
		<!--<prop key="hibernate.current_session_context_class">-->
			<!--org.springframework.orm.hibernate4.SpringSessionContext-->
		<!--</prop>-->
	<!--</utils:properties>-->



	<!--<bean id="sessionFactory"-->
		<!--class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">-->
		<!--<property name="dataSource" ref="dataSource"></property>-->
		<!--<property name="hibernateProperties">-->
			<!--<ref bean="hibernateProperties"></ref>-->
		<!--</property>-->
		<!--&lt;!&ndash;包扫描 替代配置文件 &ndash;&gt;-->
		<!--<property name="packagesToScan">-->
			<!--<list>-->
				<!--<value>com.mm.back.entity</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->


	<!--<bean id="transactionManager"-->
		<!--class="org.springframework.orm.hibernate4.HibernateTransactionManager">-->
		<!--<property name="sessionFactory" ref="sessionFactory"></property>-->
	<!--</bean>-->

	<!--启动事务注解 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->


	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>



</beans>